// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.roo.inaction.model;

import java.lang.Integer;
import java.lang.String;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.roo.inaction.model.Course;
import org.roo.inaction.model.CourseTypeEnum;
import org.roo.inaction.model.TrainingProgram;
import org.roo.inaction.model.TrainingProgramDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CourseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CourseDataOnDemand: @Component;
    
    private Random CourseDataOnDemand.rnd = new SecureRandom();
    
    private List<Course> CourseDataOnDemand.data;
    
    @Autowired
    private TrainingProgramDataOnDemand CourseDataOnDemand.trainingProgramDataOnDemand;
    
    public void CourseDataOnDemand.setCourseType(Course obj, int index) {
        CourseTypeEnum courseType = CourseTypeEnum.class.getEnumConstants()[0];
        obj.setCourseType(courseType);
    }
    
    public void CourseDataOnDemand.setDescription(Course obj, int index) {
        String description = "description_" + index;
        if (description.length() > 1000) {
            description = description.substring(0, 1000);
        }
        obj.setDescription(description);
    }
    
    public void CourseDataOnDemand.setListPrice(Course obj, int index) {
        BigDecimal listPrice = BigDecimal.valueOf(index);
        if (listPrice.compareTo(new BigDecimal("99999.99")) == 1) {
            listPrice = new BigDecimal("99999.99");
        }
        obj.setListPrice(listPrice);
    }
    
    public void CourseDataOnDemand.setMaxiumumCapacity(Course obj, int index) {
        Integer maxiumumCapacity = new Integer(index);
        if (maxiumumCapacity < 1 || maxiumumCapacity > 9999) {
            maxiumumCapacity = 9999;
        }
        obj.setMaxiumumCapacity(maxiumumCapacity);
    }
    
    public void CourseDataOnDemand.setName(Course obj, int index) {
        String name = "name_" + index;
        if (name.length() > 60) {
            name = name.substring(0, 60);
        }
        obj.setName(name);
    }
    
    public void CourseDataOnDemand.setRunDate(Course obj, int index) {
        Date runDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRunDate(runDate);
    }
    
    public void CourseDataOnDemand.setTrainingProgram(Course obj, int index) {
        TrainingProgram trainingProgram = trainingProgramDataOnDemand.getRandomTrainingProgram();
        obj.setTrainingProgram(trainingProgram);
    }
    
    public Course CourseDataOnDemand.getSpecificCourse(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Course obj = data.get(index);
        return Course.findCourse(obj.getId());
    }
    
    public Course CourseDataOnDemand.getRandomCourse() {
        init();
        Course obj = data.get(rnd.nextInt(data.size()));
        return Course.findCourse(obj.getId());
    }
    
    public boolean CourseDataOnDemand.modifyCourse(Course obj) {
        return false;
    }
    
    public void CourseDataOnDemand.init() {
        data = Course.findCourseEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Course' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.roo.inaction.model.Course>();
        for (int i = 0; i < 10; i++) {
            Course obj = getNewTransientCourse(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
